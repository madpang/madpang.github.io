+++ header
@file: pd-wysheid/tickets.txt
+++

=== Ticket 1

@brief:
Figure out a folder structure for the project, such that both local test using `file://` and deployment on a server are possible.

@status: DONE

@date:
- created on 2025-02-26
- updated on 2025-02-26

@details:
The current folder has the following structure:
+++ tree
.
|- README.txt
|- tickets.txt  # issue tracker, progress log
|- index.html   # the entry point of the website
|- common/      # top level assets
|  |- fonts/
|  |- images/
|  |- styles/
|  |  |- style.css
|  |  |- common -> ../../common   # THE CRUX OF THE MATTER
|  |- scripts/
+++
It makes local testing easy, referencing the resources with relative paths.
But when deployed to GitHub Pages, the symbolic link causes problems---since it forms a loop to the top level---GitHub Actions is stuck in an infinite recursion when trying to archive artifacts, spitting the following error:
+++ quote
Archive artifact
  ./
  ./index.html
  ./README.txt
  ./.nojekyll
  ./tickets.txt
  ./common/
  ./common/styles/
  ./common/styles/style.css
  ./common/styles/common/
  ./common/styles/common/styles/
  ./common/styles/common/styles/style.css
  ./common/styles/common/styles/common/
  ./common/styles/common/styles/common/styles/
  ./common/styles/common/styles/common/styles/style.css
  ./common/styles/common/styles/common/styles/common/
  ./common/styles/common/styles/common/styles/common/styles/
  ./common/styles/common/styles/common/styles/common/styles/style.css
  ...
  ...
+++

If, instead, using absolute path for the resources, the local testing will break, since the browser will not be able to find the resources.

The purpose of this ticket is to find a way to have both local testing and deployment possible, with minimal setup.

To solve this issue, I have considered:
1. Define a variable to supply the project root path---`$(pwd)/` for local testing, and `/` for deployment.
2. Use a build script to create independent files for local testing and deployment, e.g. `index-local.html` and `index-deploy.html` by preprocessing the `index.html` file with appropriate path configuration.
3. Just use relative path for current being.

For option 1, one needs to use JavaScript to dynamically modify the HTML and CSS files at load time---e.g. `url()` in CSS, `<base>` tag in HTML. This is not ideal.
Besides, there are many constrains---for example, `url()` only accepts literal string, not variables---which makes this approach difficult to implement.
For option 2, it would be very cumbersome to maintain two separate piles of files.
For option 3, it is the simplest and most straightforward way to go, although it might not be optimal, further improvement would be applied along the progress.

@see:
- [MDN on HTML `base` tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base)
- [MDN on CSS `url()` function](https://developer.mozilla.org/en-US/docs/Web/CSS/url_value)

=== Ticket 2

@brief:
Write an article for the website.

@status: TODO

@date:
- created on 2025-02-26
- updated on 2025-02-26

=== Ticket 3

@brief:
Add a favicon to the website.

@status: TODO

@date:
- created on 2025-02-26
- updated on 2025-02-26

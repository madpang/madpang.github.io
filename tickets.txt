+++ header
@file: pd-wysheid/tickets.txt
+++

=== Ticket 1

@brief:
Figure out a folder structure for the project, such that both local test using `file://` and deployment on a server are possible.

@status: DONE

@date:
- created on 2025-02-26
- updated on 2025-02-26

@details:
The folder structure was like:
+++ tree
.
|- README.txt
|- tickets.txt  # issue tracker, progress log
|- index.html   # the entry point of the website
|- common/      # top level assets
|  |- fonts/
|  |- images/
|  |- styles/
|  |  |- style.css
|  |  |- common -> ../../common   # THE CRUX OF THE MATTER
|  |- scripts/
+++
The crux of the matter was that recursive symlink.
I used this because I want to reference the resource from anywhere in this repo. by starting from the top level---pretty influenced by my C++ development experience (where one usually use CMakefile to define the project root path)---for example, the `index.html` file can reference the CSS file by `common/styles/style.css`, and the CSS file can reference the font file by `common/fonts/font.ttf`, and so on.

But the recursive symlink is not a good idea, since it creates a loop in the folder structure, and upon deployment, GitHub Action gets stuck:
+++ quote
Archive artifact
  ./
  ./index.html
  ./README.txt
  ./.nojekyll
  ./tickets.txt
  ./common/
  ./common/styles/
  ./common/styles/style.css
  ./common/styles/common/
  ./common/styles/common/styles/
  ./common/styles/common/styles/style.css
  ./common/styles/common/styles/common/
  ./common/styles/common/styles/common/styles/
  ./common/styles/common/styles/common/styles/style.css
  ./common/styles/common/styles/common/styles/common/
  ./common/styles/common/styles/common/styles/common/styles/
  ./common/styles/common/styles/common/styles/common/styles/style.css
  ...
  ...
+++

Actually, on a server, one can use absolute path for the resources, e.g. `/common/styles/style.css`, but this in the other hand, will break the local testing---`/` would just direct to the root of the filesystem.

The purpose of this ticket is to find a way to have both local testing and deployment possible, with minimal setup.

To solve this issue, I have considered:
1. Define a variable to supply the project root path---`$(pwd)/` for local testing, and `/` for deployment.
2. Use a build script to create independent files for local testing and deployment, e.g. `index-local.html` and `index-deploy.html` by preprocessing the `index.html` file with appropriate path configuration.
3. Just use relative path for current being.

For option 1, one needs to use JavaScript to dynamically modify the HTML and CSS files at load time---e.g. `url()` in CSS, `<base>` tag in HTML. This is not ideal.
Besides, there are many constrains---for example, `url()` only accepts literal string, not variables---which makes this approach difficult to implement.
For option 2, it would be very cumbersome to maintain two separate piles of files.
For option 3, it is the simplest and most straightforward way to go, although it might not be optimal, further improvement would be applied along the progress.

@see:
- [MDN on HTML `base` tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base)
- [MDN on CSS `url()` function](https://developer.mozilla.org/en-US/docs/Web/CSS/url_value)

=== Ticket 2

@brief:
Write an article for the website.

@status: DONE

@date:
- created on 2025-02-26
- updated on 2025-05-22

@details:
The first article is stamped as `PD_2025_05_16_a`, which is a post about the process of building *THIS* blog website.
It should be maintained along with the development, but anyway, it is the first article that officially published online.

=== Ticket 3

@brief:
Add a favicon to the website.

@status: DONE

@date:
- created on 2025-02-26
- updated on 2025-05-31

@details:

It is a good idea to provide multiple sizes of the favicon image to allow browsers to choose the most suitable one for their interface.
Although it is said 16x16-pixel is the standard size for a favicon, modern browsers seems to default to 32x32-pixel (checked on Firefox and Safari).

Also note that different browsers have different prefers for favicon sizes.
I have done an experiment, starting with the following versions of the favicon image (I intentionally used different images for different sizes):
+++ HTML
<link rel="icon" type="image/png" sizes="16x16" href="./commons/images/favicon-16.png" />
<link rel="icon" type="image/png" sizes="32x32" href="./commons/images/favicon-32.png" />
<link rel="icon" type="image/png" sizes="64x64" href="./commons/images/favicon-64.png" />
+++
Both Firefox and Safari selected the 32x32-pixel version (on macOS).
But if I comment out the 32x32-pixel version, Firefox would select the 64x64-pixel version, while Safari would select the 16x16-pixel version.
I think this is also related to the HDPi display issue, since macOS defaults to 2x pixel density---Firefox may select the 64x64-pixel version to match the nominal 32x32-pixel size.

=== Ticket 4

@brief:
Add a build script to automate the post generation process.

@status: DONE

@date:
- created on 2025-05-31
- updated on 2025-06-01

@details:
Execute `pwsh -nop build.ps1` to build the website.
- `build.ps1` is a PowerShell script that implements a simple version based merge algorithm to update those posts that had a change.
- inside `build.ps1`, it calls `build-post.ps1` to handle the generation of each post---template insertion, metadata extraction, and so on.
- inside `build-post.ps1`, it calls external tool `mmd2html` to convert the plain text markup manuscript to HTML post.

@note:
This workflow requires PowerShell be installed on CI environment.

=== Ticket 5

@brief:
Refine the layout of the website.

@status: TODO

@date:
- created on 2025-07-04
- updated on 2025-07-04

@details:
The current layout of the website is functional, but there are several areas that could be improved for better usability and aesthetics.

=== Ticket 6

@brief:
Add a logo to the upper left corner of the website.

@status: TODO

@date:
- created on 2025-07-04
- updated on 2025-07-04

@details:
First I need a logo.

=== Ticket 7

@brief:
Add a search function to the website.

@status: TODO

@date:
- created on 2025-07-04
- updated on 2025-07-04

@details:
A search function would be a great addition to the website, allowing users to quickly find relevant posts and information.

=== Ticket 8

@brief:
Add a game to the website.

@status: TODO

@date:
- created on 2025-07-04
- updated on 2025-07-04

@details:
Just for fun.
I just would try to make some simple web games withe the help of AI tools.

=== Ticket 9

@brief:
Make the top navigation bar semi-transparent.

@status: TODO

@date:
- created on 2025-07-04
- updated on 2025-07-04

@details:
Try to mimic the *Liquid Glass* effect introduced by Apple in WWDC (Worldwide Developers Conference) 2025.

=== Ticket 10

@brief:
Automatic post title extraction and insertion into the index page.

@status: TODO

@date:
- created on 2025-07-07
- updated on 2025-07-07

@details:
Currently, the post titles are manually inserted into the index page.
I would like to automate this process by extracting the post titles from the metadata and inserting them into the index page automatically.

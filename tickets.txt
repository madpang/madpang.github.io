+++ header
@file: pd-wysheid/tickets.txt
+++

=== Ticket 1

@brief:
Figure out a folder structure for the project, such that both local test using `file://` and deployment on a server are possible.

@status: DONE

@date:
- created on 2025-02-26
- updated on 2025-02-26

@details:
The folder structure was like:
+++ tree
.
|- README.txt
|- tickets.txt  # issue tracker, progress log
|- index.html   # the entry point of the website
|- common/      # top level assets
|  |- fonts/
|  |- images/
|  |- styles/
|  |  |- style.css
|  |  |- common -> ../../common   # THE CRUX OF THE MATTER
|  |- scripts/
+++
The crux of the matter was that recursive symlink.
I used this because I want to reference the resource from anywhere in this repo. by starting from the top level---pretty influenced by my C++ development experience (where one usually use CMakefile to define the project root path)---for example, the `index.html` file can reference the CSS file by `common/styles/style.css`, and the CSS file can reference the font file by `common/fonts/font.ttf`, and so on.

But the recursive symlink is not a good idea, since it creates a loop in the folder structure, and upon deployment, GitHub Action gets stuck:
+++ quote
Archive artifact
  ./
  ./index.html
  ./README.txt
  ./.nojekyll
  ./tickets.txt
  ./common/
  ./common/styles/
  ./common/styles/style.css
  ./common/styles/common/
  ./common/styles/common/styles/
  ./common/styles/common/styles/style.css
  ./common/styles/common/styles/common/
  ./common/styles/common/styles/common/styles/
  ./common/styles/common/styles/common/styles/style.css
  ./common/styles/common/styles/common/styles/common/
  ./common/styles/common/styles/common/styles/common/styles/
  ./common/styles/common/styles/common/styles/common/styles/style.css
  ...
  ...
+++

Actually, on a server, one can use absolute path for the resources, e.g. `/common/styles/style.css`, but this in the other hand, will break the local testing---`/` would just direct to the root of the filesystem.

The purpose of this ticket is to find a way to have both local testing and deployment possible, with minimal setup.

To solve this issue, I have considered:
1. Define a variable to supply the project root path---`$(pwd)/` for local testing, and `/` for deployment.
2. Use a build script to create independent files for local testing and deployment, e.g. `index-local.html` and `index-deploy.html` by preprocessing the `index.html` file with appropriate path configuration.
3. Just use relative path for current being.

For option 1, one needs to use JavaScript to dynamically modify the HTML and CSS files at load time---e.g. `url()` in CSS, `<base>` tag in HTML. This is not ideal.
Besides, there are many constrains---for example, `url()` only accepts literal string, not variables---which makes this approach difficult to implement.
For option 2, it would be very cumbersome to maintain two separate piles of files.
For option 3, it is the simplest and most straightforward way to go, although it might not be optimal, further improvement would be applied along the progress.

@see:
- [MDN on HTML `base` tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base)
- [MDN on CSS `url()` function](https://developer.mozilla.org/en-US/docs/Web/CSS/url_value)

=== Ticket 2

@brief:
Write an article for the website.

@status: TODO

@date:
- created on 2025-02-26
- updated on 2025-02-26

=== Ticket 3

@brief:
Add a favicon to the website.

@status: TODO

@date:
- created on 2025-02-26
- updated on 2025-02-26
